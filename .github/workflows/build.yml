name: Build and Deploy

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build'
        required: true
        default: 'main'

jobs:
  build:
    runs-on: macos-latest

    steps:
      - name: Checkout the Private Repository
        uses: actions/checkout@v3
        with:
          repository: Hantex9/easybook-app-refactor
          token: ${{ secrets.EASYBOOK_RELEASE_AUTOMATION_REPO_TOKEN }}
          ref: ${{ github.event.inputs.branch }}
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.x

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Setup EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Install dependencies
        run: npm install

      - name: Install jq
        run: |
          if ! command -v jq &> /dev/null; then
            brew install jq
          else
            echo "jq is already installed"
          fi

      - name: Install fastlane
        run: |
          if ! command -v fastlane &> /dev/null; then
            brew install fastlane
          else
            echo "fastlane is already installed"
          fi

      - name: Extract and transform app name from app.json
        id: extract-transform-name
        run: |
          NAME=$(jq -r '.expo.name' app.json)
          BUNDLE_TARGET=$(echo $NAME | tr -d ' ')
          BUNDLE_ID=$(jq -r '.expo.ios.bundleIdentifier' app.json)
          EXTENSION_BUNDLE_ID="${BUNDLE_ID}.OneSignalNotificationServiceExtension"
          echo "BUNDLE_TARGET=$BUNDLE_TARGET" >> $GITHUB_ENV
          echo "BUNDLE_ID=$BUNDLE_ID" >> $GITHUB_ENV
          echo "EXTENSION_BUNDLE_ID=$EXTENSION_BUNDLE_ID" >> $GITHUB_ENV

      - name: Decode and Create Certificate and Provisioning Profile
        run: |
          echo "${{ secrets.CERT_P12_BASE64 }}" | base64 --decode > certificate.p12
          
      - name: Configure Fastlane API Key
        run: |
          mkdir -p fastlane
          echo "${{ secrets.APPLE_P8 }}" | base64 --decode > fastlane/AuthKey.p8
          jq -n --arg key_id "${{ secrets.APPLE_KEY_ID }}" --arg issuer_id "${{ secrets.APPLE_ISSUER_ID }}" --arg key "$(cat fastlane/AuthKey.p8)" --argjson in_house false \
          '{key_id: $key_id, issuer_id: $issuer_id, key: $key, in_house: $in_house}' > fastlane/api_key.json

      - name: Create Fastfile
        run: |
          echo "lane :create_app do
            api_key = app_store_connect_api_key(
              key_id: '${{ secrets.APPLE_KEY_ID }}',
              issuer_id: '${{ secrets.APPLE_ISSUER_ID }}',
              key_filepath: '$(pwd)/fastlane/AuthKey.p8'
            )

            # Function to check if an app exists
            def app_exists?(bundle_id)
              Spaceship::ConnectAPI::App.find(bundle_id) != nil
            rescue Spaceship::TunesClient::ITunesConnectError
              return false
            end

            # Authenticate with API key
            token = Spaceship::ConnectAPI::Token.create(
              key_id: '${{ secrets.APPLE_KEY_ID }}',
              issuer_id: '${{ secrets.APPLE_ISSUER_ID }}',
              filepath: '$(pwd)/fastlane/AuthKey.p8'
            )
            Spaceship::ConnectAPI.token = token

            # Create the app if it doesn't exist
            unless app_exists?(ENV['BUNDLE_ID'])
              UI.message('Main app does not exist. Creating...')
              app = Spaceship::ConnectAPI::App.create(
                name: ENV['BUNDLE_TARGET'],
                primary_locale: 'en-US',
                sku: ENV['BUNDLE_ID'].gsub('.', '-'),
                bundle_id: ENV['BUNDLE_ID']
              )
            else
              UI.message('Main app already exists. Skipping creation.')
            end

            # Create the OneSignal Notification Service Extension app if it doesn't exist
            unless app_exists?(ENV['EXTENSION_BUNDLE_ID'])
              UI.message('OneSignal Notification Service Extension app does not exist. Creating...')
              app_extension = Spaceship::ConnectAPI::App.create(
                name: ENV['BUNDLE_TARGET'] + ' OneSignal Extension',
                primary_locale: 'en-US',
                sku: ENV['EXTENSION_BUNDLE_ID'].gsub('.', '-'),
                bundle_id: ENV['EXTENSION_BUNDLE_ID']
              )
            else
              UI.message('OneSignal Notification Service Extension app already exists. Skipping creation.')
            end

            # Generate provisioning profiles
            sigh(
              app_identifier: ENV['BUNDLE_ID'],
              output_path: '.',
              filename: 'provisioning_profile.mobileprovision'
            )
            sigh(
              app_identifier: ENV['EXTENSION_BUNDLE_ID'],
              output_path: '.',
              filename: 'provisioning_profile_onesignal.mobileprovision'
            )
          end" > fastlane/Fastfile

      - name: Run Fastlane
        run: fastlane create_app

      - name: Run Fastlane
        run: fastlane create_app
          
      - name: Create credentials.json
        run: |
          echo '{
            "ios": {
              "OneSignalNotificationServiceExtension": {
                "distributionCertificate": {
                  "path": "certificate.p12",
                  "password": "${{ secrets.CERT_P12_PASSWORD }}"
                },
                "provisioningProfilePath": "provisioning_profile_onesignal.mobileprovision"
              },
              "'$BUNDLE_TARGET'": {
                "distributionCertificate": {
                  "path": "certificate.p12",
                  "password": "${{ secrets.CERT_P12_PASSWORD }}"
                },
                "provisioningProfilePath": "provisioning_profile.mobileprovision"
              }
            }
          }' > ./credentials.json

      - name: Build iOS
        env:
          EXPO_APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          EXPO_APPLE_KEY_ID: ${{ secrets.APPLE_KEY_ID }}
          EXPO_APPLE_ISSUER_ID: ${{ secrets.APPLE_ISSUER_ID }}
          EXPO_APPLE_API_KEY_PATH: ${{ secrets.APPLE_P8 }}
        run: eas build -p ios --local --non-interactive

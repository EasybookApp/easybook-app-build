name: Build and Deploy

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to build"
        required: true
        default: "main"

jobs:
  build_ios:
    runs-on: macos-latest
    env:
      DEVELOPER_DIR: "/Applications/Xcode_15.2.app"

    steps:
      - name: Checkout the Private Repository
        uses: actions/checkout@v3
        with:
          repository: Hantex9/easybook-app-refactor
          token: ${{ secrets.EASYBOOK_RELEASE_AUTOMATION_REPO_TOKEN }}
          ref: ${{ github.event.inputs.branch }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.x

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Setup EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Install dependencies
        run: npm install

      - name: Install jq
        run: |
          if ! command -v jq &> /dev/null; then
            brew install jq
          else
            echo "jq is already installed"
          fi

      - name: Install fastlane
        run: |
          if ! command -v fastlane &> /dev/null; then
            brew install fastlane
          else
            echo "fastlane is already installed"
          fi

      - name: Extract and transform app name from app.json
        id: extract-transform-name
        run: |
          NAME=$(jq -r '.expo.name' app.json)
          BUNDLE_TARGET=$(echo $NAME | tr -d ' ')
          BUNDLE_ID=$(jq -r '.expo.ios.bundleIdentifier' app.json)
          EXTENSION_BUNDLE_ID="${BUNDLE_ID}.OneSignalNotificationServiceExtension"
          APP_VERSION=$(jq -r '.expo.version' app.json)
          APP_NAME=$(jq -r '.expo.name' app.json)
          echo "BUNDLE_TARGET=$BUNDLE_TARGET" >> $GITHUB_ENV
          echo "BUNDLE_ID=$BUNDLE_ID" >> $GITHUB_ENV
          echo "EXTENSION_BUNDLE_ID=$EXTENSION_BUNDLE_ID" >> $GITHUB_ENV
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV

      - name: Create Keychain
        run: |
          security create-keychain -p ${{ secrets.KEYCHAIN_PASSWORD }} build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p ${{ secrets.KEYCHAIN_PASSWORD }} build.keychain
          security set-keychain-settings -t 3600 -u build.keychain

      - name: Decode and Create Certificate and Provisioning Profile
        run: |
          echo "${{ secrets.CERT_P12_BASE64 }}" | base64 --decode > certificate.p12
          security import certificate.p12 -P "${{ secrets.CERT_P12_PASSWORD }}" -A -T /usr/bin/codesign -T /usr/bin/security
          security set-key-partition-list -S apple-tool:,apple: -s -k ${{ secrets.KEYCHAIN_PASSWORD }} build.keychain

      - name: Configure Fastlane API Key
        run: |
          echo "${{ secrets.APPLE_P8 }}" | base64 --decode > fastlane/AuthKey.p8
          jq -n --arg key_id "${{ secrets.APPLE_KEY_ID }}" --arg issuer_id "${{ secrets.APPLE_ISSUER_ID }}" --arg key "$(cat fastlane/AuthKey.p8)" --argjson in_house false \
          '{key_id: $key_id, issuer_id: $issuer_id, key: $key, in_house: $in_house}' > fastlane/api_key.json

      - name: Run Fastlane Create App
        env:
          AUTH_KEY_PATH: "fastlane/AuthKey.p8"
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_KEY_ID: ${{ secrets.APPLE_KEY_ID }}
          APPLE_ISSUER_ID: ${{ secrets.APPLE_ISSUER_ID }}
          BUNDLE_ID: ${{ env.BUNDLE_ID }}
          EXTENSION_BUNDLE_ID: ${{ env.EXTENSION_BUNDLE_ID }}
          APP_NAME: ${{ env.APP_NAME }}
        run: fastlane create_app

      - name: Create credentials.json
        run: |
          echo '{
            "ios": {
              "OneSignalNotificationServiceExtension": {
                "distributionCertificate": {
                  "path": "certificate.p12",
                  "password": "${{ secrets.CERT_P12_PASSWORD }}"
                },
                "provisioningProfilePath": "provisioning_profile_onesignal.mobileprovision"
              },
              "'$BUNDLE_TARGET'": {
                "distributionCertificate": {
                  "path": "certificate.p12",
                  "password": "${{ secrets.CERT_P12_PASSWORD }}"
                },
                "provisioningProfilePath": "provisioning_profile.mobileprovision"
              }
            }
          }' > ./credentials.json

      # - name: Install Apple Sim utils to take screenshots
      #   if: ${{ env.APP_VERSION == '1.0.0' }}
      #   run: |
      #     brew tap wix/brew
      #     brew install applesimutils

      # - name: Create detox build to take screenshots
      #   if: ${{ env.APP_VERSION == '1.0.0' }}
      #   run: npm run build:ios:test

      # - name: Decompress detox build artifact
      #   if: ${{ env.APP_VERSION == '1.0.0' }}
      #   run: |
      #     tar -xzvf build-*.tar.gz -C ./

      # - name: Take app screenshots
      #   if: ${{ env.APP_VERSION == '1.0.0' }}
      #   run: npm run generate:ios:screenshots

      # - name: Select Xcode version
      #   run: sudo xcode-select -s '/Applications/Xcode_15.2.app/Contents/Developer'

      - name: Build iOS
        env:
          EXPO_APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          EXPO_APPLE_KEY_ID: ${{ secrets.APPLE_KEY_ID }}
          EXPO_APPLE_ISSUER_ID: ${{ secrets.APPLE_ISSUER_ID }}
          EXPO_APPLE_API_KEY_PATH: fastlane/AuthKey.p8
        run: eas build -p ios --local --non-interactive

      - name: Upload to App Store
        env:
          AUTH_KEY_PATH: "fastlane/AuthKey.p8"
          APPLE_KEY_ID: ${{ secrets.APPLE_KEY_ID }}
          APPLE_ISSUER_ID: ${{ secrets.APPLE_ISSUER_ID }}
          SKIP_SCREENSHOTS: ${{ env.APP_VERSION != '1.0.0' }}
        run: fastlane upload_ipa_to_app_store

  build_android:
    runs-on: ubuntu-latest
    needs: build_ios

    steps:
      - name: Checkout the Private Repository
        uses: actions/checkout@v3
        with:
          repository: Hantex9/easybook-app-refactor
          token: ${{ secrets.EASYBOOK_RELEASE_AUTOMATION_REPO_TOKEN }}
          ref: ${{ github.event.inputs.branch }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.x

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # - name: For act to work (local testing)
      #   run:  npm -g install yarn

      - name: Setup EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Extract app.json info
        id: extract-transform-name
        run: |
          ANDROID_PACKAGE=$(jq -r '.expo.android.package' app.json)
          APP_NAME=$(jq -r '.expo.name' app.json)
          APP_VERSION=$(jq -r '.expo.version' app.json)
          echo "ANDROID_PACKAGE=$ANDROID_PACKAGE" >> $GITHUB_ENV
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV

      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Install dependencies
        run: npm install

      - name: Decode and Create Google Play Json Key
        run: |
          echo "${{ secrets.GOOGLE_PLAY_JSON_KEY_BASE64 }}" | base64 --decode > google_play_json_key.json

      - name: Create detox build to take screenshots
        if: ${{ env.APP_VERSION == '1.0.0' }}
        run: npm run build:android:test

      - name: Decompress detox build artifact
        if: ${{ env.APP_VERSION == '1.0.0' }}
        run: |
          mkdir -p ./builds
          tar -xzvf build-*.tar.gz -C ./builds

      - name: Enable KVM for running Android Emulator
        if: ${{ env.APP_VERSION == '1.0.0' }}
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Take app screenshots on Android Emulator ðŸ¤–
        if: ${{ env.APP_VERSION == '1.0.0' }}
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 33
          target: google_apis
          arch: x86_64
          profile: Nexus 6
          avd-name: Nexus_6_API_33
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: npm run generate:android:screenshots

      - name: Build Android
        run: |
          npm run build:android

      - name: Upload the update to the Play Store ðŸš€
        if: env.APP_VERSION != '1.0.0'
        env:
          ANDROID_PACKAGE_NAME: ${{ env.ANDROID_PACKAGE }}
          GOOGLE_PLAY_JSON_KEY: google_play_json_key.json
        run: fastlane upload_aab_to_play_store

      - name: Checkout Easybook Automation Repository
        if: env.APP_VERSION == '1.0.0'
        uses: actions/checkout@v3
        with:
          repository: Hantex9/easybook-release-automation-android
          token: ${{ secrets.EASYBOOK_RELEASE_AUTOMATION_REPO_TOKEN }}
          path: easybook-release-automation-android

      - name: Install Easybook release automation dependencies
        if: env.APP_VERSION == '1.0.0'
        run: npm install
        working-directory: easybook-release-automation-android

      - name: Create the app on the Play Store with Easybook Automation ðŸ“²
        if: env.APP_VERSION == '1.0.0'
        run: npm run start
        working-directory: easybook-release-automation-android
        env:
          GOOGLE_PLAY_EMAIL: ${{ secrets.GOOGLE_PLAY_EMAIL }}
          GOOGLE_PLAY_PASSWORD: ${{ secrets.GOOGLE_PLAY_PASSWORD }}
